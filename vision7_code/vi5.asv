function FI = vi5(imgSeqColor, varargin)
%% preparing
r  = 12;
[s1,s2,s3,s4] = size(imgSeqColor);
%% input params parsing
    alpha = 1.1; 
    SigD = 0.12;
    p = 4;
    gSig = 0.2;
    lSig = 0.5;
    wSize = 21;
    stepSize = 2;
    exposureThres = 0.01;
    consistencyThres = 0.1;
    structureThres = 0.8;
    C = 0.03 ^ 2 / 2; % inherited from SSIM
    epsil = 0.25;     % (0.5*1)^2;
    np = s1*s2;
    H = ones(7);      % small average filter is enough
    H = H/sum(H(:));
    Fake_Ref = zeros(s1,s2,s3);
    L = zeros(s1,s2,s4); 
    gMu = zeros(s1, s2, s4);      % global mean intensity
    BaseMu   = zeros(s1, s2, s4); % local mean intensity
    Iones = ones(s1, s2);
    
    
    %% Optimise Ref image
    t_ref = 0.015;  %所设定阈值
    for i = 1 : s4
        Ig   = rgb2grey(imgSeqColor(:,:,:,i));
        B = unique(Ig);
        [Bs1,Bs2]=size(B); 
        %meaneq = mean(mean(Ig));
        %stdeq = std(std(Ig));
        %t_ref = 2*meaneq*stdeq;
        num = floor(Bs1*t_ref); %防止小数
        c = zeros(num,1);
        c1 = zeros(num,1);
        for j=1:num
            c(j)=length(find(Ig==B(j)));
        end
        for j=Bs1-num:Bs1
            c1(Bs1-j+1)=length(find(Ig==B(j)));
        end
        cm = zeros(length(B(:,1)),1);
        for m = 1:length(B(:,1))
           cm(m) = length(find(Ig==B(m)));
        end
        plot(B(:,1),cm(:,1)); % 正态分布图
        axis([0 1 0 3000]);
        c_t(1) = max(c);
        c_t(2) = max(c1);
        c_f(i) = max(c_t)>(s1*s2*0.01);  
    end
    imgSeqColor_Ref = imgSeqColor;
    if length(find(c_f==1))==s4
        refIdx = floor((s4+1)/2);
        else
        for i = 1:s4
            if c_f(i) == 1
                imgSeqColor_Ref(:,:,:,i) = Fake_Ref;
            end
        end
        refIdx = selectRef(imgSeqColor_Ref); %select ref image the unsuitable pictures are replaced to zero.
    end

 
%% SSIM consistency by Kede Ma
    % parameters setting
    numExd = 2*s4-1; 
    imgSeqColorExd = zeros(s1, s2, s3, numExd);
    imgSeqColorExd(:,:,:,1:s4) = imgSeqColor;
    xIdxMax = s1-wSize+1;
    yIdxMax = s2-wSize+1; 
    window = ones(wSize);
    window3D = repmat(window, [1, 1, 3]);
    window = window / sum(window(:));
    window3D = window3D / sum(window3D(:));

    %得到局部/全局平均亮度
      %---consistency index
    temp  = zeros(xIdxMax, yIdxMax, s3);
    lMu_c   = zeros(xIdxMax, yIdxMax, numExd); % local mean intensity
    lMuSq_c = zeros(xIdxMax, yIdxMax, numExd); % 上值是为了得到此值
    for i = 1 : numExd
        for j = 1 : s3
            temp(:,:,j) = filter2(window, imgSeqColorExd(:, :, j, i), 'valid');
        end
        lMu_c(:,:,i) = mean(temp, 3);  % (R + G + B) / 3;
        lMuSq_c(:,:,i) = lMu_c(:,:,i) .* lMu_c(:,:,i); %对应值平方
    end
    sigmaSq = zeros(xIdxMax, yIdxMax, numExd); % signal strength from variance
    for i = 1 : numExd
        for j = 1 : s3
            temp(:,:,j) = filter2(window, imgSeqColorExd(:, :, j, i).*...
                imgSeqColorExd(:, :, j, i), 'valid') - lMuSq_c(:,:,i);
        end
        sigmaSq(:,:,i) = mean(temp, 3);   
    end
    % 上文好几个参数规格都是相同的 lMu_c lMuSq_c sigmaSq 都是为了得到sigma 可以说明一下sigma
    sigma = sqrt( max( sigmaSq, 0 ) ); % sigma 规格与前也相同 与crosssigma对比 
    
    % computing structural consistency map 计算结构一致性图
    sMap_c = zeros(xIdxMax, yIdxMax, s4, s4); 
    for i = 1 : s4
        for j = i+1 : s4
        crossMu = lMu_c(:,:,i) .* lMu_c(:,:,j);
       crossSigma = convn(imgSeqColorExd(:, :, :, i).*imgSeqColorExd(:, :, :, j)...
            , window3D, 'valid') - crossMu;
        sMap_c(:,:,i,j) = ( crossSigma + C) ./ (sigma(:,:,i).* sigma(:,:,j) + C); % the third term in SSIM
        end
    end
    sMap_c(sMap_c < 0) = 0;
    
    sRefMap = squeeze(sMap_c(:,:,refIdx,:)) + sMap_c(:,:,:,refIdx);
    sRefMap(:,:,refIdx) = ones(xIdxMax, yIdxMax); % add reference
    sRefMap(sRefMap <= structureThres) = 0;
    sRefMap(sRefMap > structureThres) = 1;
    muIdxMap = lMu_c(:,:,refIdx) < exposureThres | lMu_c(:,:,refIdx) > 1 - exposureThres;
    muIdxMap = repmat(muIdxMap, [1, 1, s4]);
    sRefMap(muIdxMap) = 1;
    se = strel('disk',wSize);
    for k = 1 : s4
        sRefMap(:,:,k) = imopen(sRefMap(:,:,k),se);
    end
    clear sMap_c;
    
    iRefMap = imfConsistency(lMu_c(:,:,1:s4), refIdx, consistencyThres); 
    
    cMap = sRefMap.*iRefMap;   
    [m1,m2,m3] = size(cMap);
    RefMatrix = ones(m1,m2,m3);
%     for i = 1 : m3
%         ratio=0.005;%
%         area=ceil(ratio*m1*m2);
%         tempMap1=bwareaopen(cMap(:,:,i),area);
%         tempMap2=1-tempMap1;
%         tempMap3=bwareaopen(tempMap2,area);
%         cMap(:,:,i)=1-tempMap3;     
%     end

    cMap(cMap > 1) = 1;
    cMap(cMap < 0) = 0;
    I_out = imresize(cMap(:,:,i_cmap),[m1+,256]);
    cMap_seq = ones(s1,s2,s4);
    cMap_seq((1+(wSize-1)/2):(s1-(wSize-1)/2),(1+(wSize-1)/2):(s2-(wSize-1)/2),:)=cMap;  
    cMap_seq_3D = ones(s1,s2,s3,s4);
    for i = 1:s3
        cMap_seq_3D(:,:,i,:) = cMap_seq;
    end  
    
    % generating pseudo exposures
    count = 0;
        for i = 1 : s4
        if i ~= refIdx
            count = count + 1;
            temp = imhistmatch(imgSeqColorExd(:,:,:,refIdx),...
                imgSeqColorExd(:,:,:,i), 256);
            temp( temp<0 ) = 0;
            temp( temp>1 ) = 1;
            imgSeqColorExd(:,:,:,count+s4) = temp;          
        end
        end
    
    %----色彩明亮匹配 Replace with a bright image patch
     count = 0;
     if (length(find((RefMatrix-cMap)~=0))>m1*m2*m3*consistencyThres)
        for i = 1:s4
            if i ~= refIdx 
                count = count + 1;
                imgSeqColor(:,:,:,i) = imgSeqColor(:,:,:,i) .* cMap_seq_3D(:,:,:,i) + (imgSeqColorExd(:,:,:,s4 + count) .* ~cMap_seq_3D(:,:,:,i));
            end
        end
     end
    
%% 对图像进行基层 细节层的分解   
% base layer
%Initial
for i = 1:s4
    %分解步骤
    %---- luminance component
    Ig   = rgb2grey(imgSeqColor(:,:,:,i)); 
    
     %--- filtered luminance component
    IgPad = padimage(Ig,[3,3]);
    L(:,:,i) = conv2(IgPad, H, 'valid');  %小局部平均亮度
    
    %--- global mean intensity
    gMu(:,:,i) = Iones * sum(Ig(:))/np;
    
    %--- local mean intensity (Base layer)
    BaseMu(:,:,i) = fastGF(Ig, r, epsil, 2.5);
    
  
end
    %计算统计
    % computing statistics
    bgMu = zeros(xIdxMax, yIdxMax, s4); % global mean intensity
    for i = 1 : s4
        img = BaseMu(:,:,i);
        bgMu(:,:,i) = ones(xIdxMax, yIdxMax) * mean(img(:));
    end
   
    temp  = zeros(xIdxMax, yIdxMax, s4);
    lMu   = zeros(xIdxMax, yIdxMax, s4); % local mean intensity
    lMuSq = zeros(xIdxMax, yIdxMax, s4);
    for i = 1 : s4
        temp(:,:,i) = filter2(window, BaseMu(:, :,  i), 'valid');
        lMu(:,:,i) = temp(:,:,i); % (R + G + B) / 3;
        lMuSq(:,:,i) = lMu(:,:,i) .* lMu(:,:,i);
    end
    
        sigmaSq = zeros(xIdxMax, yIdxMax, s4); % signal strength from variance
    for i = 1 : s4
            temp(:,:,i) = filter2(window, BaseMu(:, :,  i).*...
                BaseMu(:, :,  i), 'valid') - lMuSq(:,:,i);
        sigmaSq(:,:,i) = temp(:,:,i);   
    end
    sigma = sqrt( max( sigmaSq, 0 ) );
    ed = sigma * sqrt( wSize^2 * s4 ) + 0.001; % signal strengh
    
    % computing weighing map 
    muMap =  exp( -.5 * ( (bgMu - .5).^2 /gSig.^2 +  (lMu - .5).^2 /lSig.^2 ) ); % mean intensity weighting map
    normalizer = sum(muMap, 3);
    muMap = muMap ./ repmat(normalizer,[1, 1, s4]);   

    sMap = ed.^p; % signal structure weighting map
    sMap = sMap + 0.001;
    normalizer = sum(sMap,3);
    sMap = sMap ./ repmat(normalizer,[1, 1, s4]);
    
    maxEd = max(ed, [], 3); %  desired signal strength
    
    % main loop for motion aware fusion
    fI = zeros(s1, s2, s4); 
    countMap = zeros(s1, s2, s4); 
    countWindow = ones(wSize, wSize, s4);
    xIdx = 1 : stepSize : xIdxMax;
    xIdx = [xIdx xIdx(end)+1 : xIdxMax];
    yIdx = 1 : stepSize : yIdxMax;
    yIdx = [yIdx yIdx(end)+1 : yIdxMax];

    offset = wSize-1;
    for row = 1 : length(xIdx)
        for col = 1 : length(yIdx)
            i = xIdx(row);
            j = yIdx(col);
            blocks = BaseMu(i:i+offset, j:j+offset,  :);
            rBlock = zeros(wSize, wSize, s4);
            for k = 1 : s4
                rBlock(:,:,k) = rBlock(:,:,k)  +(sMap(i, j, k) * ( blocks(:,:,k) - lMu(i, j, k) ) / ed(i, j, k));
            end
            if norm(rBlock(:)) > 0
                rBlock = rBlock / norm(rBlock(:)) * maxEd(i, j);
            end
            rBlock = rBlock + sum( muMap(i, j, :) .* lMu(i, j, :) ); 
            fI(i:i+offset, j:j+offset, :) = fI(i:i+offset, j:j+offset, :) + rBlock;
            countMap(i:i+offset, j:j+offset, :) = countMap(i:i+offset, j:j+offset, :) + countWindow;
        end
    end
    fI = fI ./ countMap;
    fI(fI > 1) = 1;
    fI(fI < 0) = 0;   %基础层处理完毕
 
%% Detail layer

%============< Computing Weight Maps  >================%
%--- Detail layer's blending weights
Sig2 = 2*SigD.^2;
dsMap = exp(-1*(L - .5).^2 /Sig2)+1e-6; 
normalizer = sum(dsMap, 3);
dsMap = dsMap ./ repmat(normalizer,[1, 1, s4]); 
%--- Base layer's blending weights
dmuMap =  exp( -.5 * ( (gMu - .5).^2 /gSig.^2 +  (fI - .5).^2 /lSig.^2 ) ); % mean intensity weighting map
normalizer = sum(dmuMap, 3);
dmuMap = dmuMap ./ repmat(normalizer,[1, 1, s4]);


%=====================< Fusion >======================%
FI  = zeros(s1, s2, 3);
% sMap = alpha*sMap;
for j=1:3
    Ist = (squeeze(imgSeqColor(:,:,j,:))-BaseMu); %得到的是细节层
    FI(:,:,j) = sum((alpha*dsMap.*Ist + dmuMap.*fI),3);
    % dmuMap.*
end
FI(FI > 1) = 1;
FI(FI < 0) = 0;

return

end
